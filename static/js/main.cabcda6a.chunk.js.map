{"version":3,"sources":["components/CardList.js","components/SearchRobos.js","svg/Loader.js","components/Scroll.js","containers/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","searchStyle","padding","SearchRobos","handleChange","type","id","style","onChange","RectLoader","width","height","viewBox","y","fill","attributeName","values","begin","dur","repeatCount","x","scrollStyle","overflowY","Scroll","children","ErrorBoundary","props","state","hasError","error","info","console","log","this","setState","Component","h2Style","fontFamily","fontSize","marginBottom","color","textShadow","App","handleSearchChange","e","searchField","target","value","fetch","then","result","json","data","filteredRobots","filter","robot","name","toLowerCase","includes","length","className","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cabcda6a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  if (true) {\r\n    throw new Error(\"NOOOOOOOOOO!\");\r\n  }\r\n  const cardsArray = robots.map((card) => {\r\n    return (\r\n      <Card id={card.id} name={card.name} email={card.email} key={card.id} />\r\n    );\r\n  });\r\n  return <div className=\"robots-wrapper\">{cardsArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst searchStyle = {\r\n  padding: \"0.5rem 1rem\",\r\n};\r\n\r\nconst SearchRobos = ({ handleChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"search\"\r\n        id=\"search\"\r\n        style={searchStyle}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchRobos;\r\n","import React from \"react\";\r\n\r\nconst RectLoader = () => {\r\n  return (\r\n    <svg width=\"51px\" height=\"50px\" viewBox=\"0 0 51 50\">\r\n      <rect y=\"0\" width=\"13\" height=\"50\" fill=\"#1fa2ff\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          values=\"50;10;50\"\r\n          begin=\"0s\"\r\n          dur=\"1s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          values=\"0;20;0\"\r\n          begin=\"0s\"\r\n          dur=\"1s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n\r\n      <rect x=\"19\" y=\"0\" width=\"13\" height=\"50\" fill=\"#12d8fa\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          values=\"50;10;50\"\r\n          begin=\"0.2s\"\r\n          dur=\"1s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          values=\"0;20;0\"\r\n          begin=\"0.2s\"\r\n          dur=\"1s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n\r\n      <rect x=\"38\" y=\"0\" width=\"13\" height=\"50\" fill=\"#06ffcb\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          values=\"50;10;50\"\r\n          begin=\"0.4s\"\r\n          dur=\"1s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          values=\"0;20;0\"\r\n          begin=\"0.4s\"\r\n          dur=\"1s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default RectLoader;\r\n","import React from \"react\";\r\n\r\nconst scrollStyle = {\r\n  height: \"70vh\",\r\n  overflowY: \"scroll\",\r\n};\r\n\r\nconst Scroll = ({ children }) => {\r\n  return <div style={scrollStyle}>{children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  // This life cycle method introduced in React-16 acts like a try-catch block\r\n  componentDidCatch(error, info) {\r\n    console.log(\"componentDidCatch method was called\");\r\n    this.setState({\r\n      hasError: true,\r\n    });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      console.log(\"It's an Error !!!\");\r\n      return <h1>Oooops. This is not good!</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"./../components/CardList\";\r\nimport SearchRobos from \"./../components/SearchRobos\";\r\nimport RectLoader from \"./../svg/Loader\";\r\nimport Scroll from \"./../components/Scroll\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\nconst h2Style = {\r\n  fontFamily: \"agency fb\",\r\n  fontSize: \"2.5rem\",\r\n  marginBottom: \"1rem\",\r\n  color: \"orange\",\r\n  textShadow: \"5px 4px #00fff2\",\r\n};\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          robots: data,\r\n        });\r\n      });\r\n  }\r\n\r\n  handleSearchChange = (e) => {\r\n    this.setState({\r\n      searchField: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // Bug fixing of filtered Robots\r\n    const { robots, searchField } = this.state;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return !robots.length ? (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <RectLoader />\r\n      </div>\r\n    ) : (\r\n      <div className=\"App\">\r\n        <h2 style={h2Style}>Robo Friends</h2>\r\n        <SearchRobos handleChange={this.handleSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n          5{\" \"}\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}